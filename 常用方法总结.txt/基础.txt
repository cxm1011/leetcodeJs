1.string
let str = 'abcde'；
1) str.split('')   // [ 'a', 'b', 'c', 'd', 'e' ]   将字符串转为字符串数组
2) str.charAt(2)  // c  得到字符串中位置为2的字符
3) str.slice(2,3) // c 获取从第2个位置但是不包括第3个位置的字符串
4) [ 'a', 'b', 'c', 'd', 'e' ].join('')  //abcde  合并字符串数组
5) str.trim(); 去除头尾空格


2.Math
1) Math.pow(2,31);  //2的31次幂

3.字符串转数字
parseInt()

4.定义栈
function Stack(){
    this.dataStore = [];
    this.top = 0;
    this.push = push;
    this.pop = pop;
    this.peek = peek;
    this.length = length;
    this.clear = clear;
}

function push(element){
    this.dataStore[this.top++] = element;
}

function pop(){
    this.dataStore[--this.top];
}
function peek(){
    return this.dataStore[this.top-1];
}
function length(){
    return this.top;
}
function clear(){
    this.top = 0;
}

5.元素是否在数组中
1)arr.includes(-1)
2)arr.indexOf(9) === -1?

6.声明数字最大值
max = Number.MAX_VALUE;

7.算法 
动态规划  62 63 64
arr[i][j] 与 arr[i-1][j]和arr[i][j-1]关系

贪心算法  
122  保证每一步都是最大利润，则总利润最大

8.求二叉树最大深度  104
return root === null ? 0 : Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;


